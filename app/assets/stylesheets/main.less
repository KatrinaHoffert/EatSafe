/**
 * This is the custom CSS for our application.
 */

/*******************************************************************************
 ****************************** GENERAL PURPOSE ********************************
 ******************************************************************************/

/* Height 100% only works if all containers are 100% height. */
html, body {
  height: 100%;
}

/* Headings can't be too large, since restaurants can have long names */
h1 {
  font-size: 1.75em;
}

h2 {
  font-size: 1.5em;
}

h3 {
  font-size: 1.25em;
}

h4 {
  font-size: 1em;
}

/* General purpose padding */
.smallPadding {
  padding: 0.5em;
}

.floatRight {
  float: right;
}

/* Faded text */
.faded {
  color: gray;
}

/* For making the mouse into a pointer (showing that content can be clicked on). */
.pointer {
  cursor: pointer;
}

/* Default tab size is ridiculous. */
pre {
  tab-size: 2;
  -moz-tab-size: 2;
  -o-tab-size: 2;
}

/*******************************************************************************
 ********************************* SPECIFICS ***********************************
 ******************************************************************************/

/* Height of the footer. */
@footerHeight: 1.5em;

/* Wrapper for whole apge; used to support footer. */
#pageWrapper {
  min-height: 100%;
  margin: 0 auto -@footerHeight;
}

/* Used to offset the footer. See: <http://ryanfait.com/sticky-footer/> */
.footerPush {
  height: @footerHeight;
}

.footer {
  background-color: #479432;
  color: white;
  height: @footerHeight;
}

/* The heading for the main page, where it takes up a larger portion of the screen. */
.largeHeading {
  background-color: #479432;
  height: 30vh;
  display: flex;
  min-height: 2em;
  font-size: 2em;
  color: white;
}

/* Need to position the text inside the heading */
.largeHeading span {
  padding: 0.25em;
  align-self: flex-end;
}

/* Heading of the address map. It has to be able to apply a white background for
   desktop viewers (who would otherwise see a gray background from the body). */
.mapLocation-header {
  text-align: center;
  background-color: white;
  margin: 0;
  padding-top: 0.5em;
  padding-bottom: 0.5em;
}

/* Smaller headings for other pages */
.smallHeading {
  background-color: #479432;
  font-size: 2em;
  padding: 0 0.25em;
  color: white;
}

/* Remove the over-done boreder around typeaheads. */
.typeahead-container {
  box-shadow: none;
  padding: 0;
}

/* Fix case of typeaheads. */
.typeahead-list, .typeahead-query input {
  text-transform: capitalize;
}

/* Fix weird positioning bug where the typeahead prompt has a gap between it
   and the text input. */
.typeahead-result {
  top: inherit;
}

/* Formatting the clear typeahead button to look like it's inside the input. */
#reset-button {
  border-top: 1px solid rgba(0, 0, 0, 0.15);
  border-bottom: 1px solid rgba(0, 0, 0, 0.15);
  border-radius: 0px;
  padding: 0px 16px;
}

/* Buttons should look clickable to the mouse */
#reset-button, #typeahead-locate {
  cursor: pointer;
}

/* Typeahead formatting for the location selection */
.locationTypeaheadAddress {
  color: #555;
  font-size: 0.8em;
}

#pastInspections {
  padding: 1em;
}

/* Override rounded accordions to make ours look flat. */
.panel-default {
  border-radius: 0 !important;
  border-top: none;
}

/* Need a wee bit of trickery to avoid double borders. */
.panel-group .panel-default:first-child {
  border-top: 1px solid #DDD;
}

.panel-group .panel + .panel {
  margin-top: 0;
}

/* Section for prominent ratings on a page */
.ratingSection {
  padding: 0.75em 0;
  font-size: 1.2em;
}

/* Rating styles. These generate everything we need to make a "rating stamp". 
   They set the text, too, so you just need an empty span with this class. The
   class names correspond with the rating names (see the Rating enum). */
.rating_good:before, .rating_fair:before, .rating_poor:before, .rating_unknown:before {
    color: white;
    text-shadow: -1px 0 black, 0 1px black, 1px 0 black, 0 -1px black,
      -1px -1px black, 1px 1px black, -1px 1px black, 1px -1px black;
    border-radius: 50%;
    padding: 0.25em 0.5em;
    font-family: Arial, "Sans Serif";
    border: 1px solid black;
    font-weight: bold;
}

.rating_good:before { background-color: green; content: "Good"; }
.rating_fair:before { background-color: #fc0; content: "Fair"; }
.rating_poor:before { background-color: red; content: "Poor"; }
.rating_unknown:before { background-color: grey; content: "N/A"; }

/* Formatting the extra data at the bottom of the location view as a list */
.locationExtraData {
  margin-top: 1em;
  list-style-type: none;
  padding-left: 0;
}

/* Extra gap between every two items (which is a pairing of bolded title and value) */
.locationExtraData li:nth-child(2n + 1) {
  margin-top: 0.5em;
}

/* Formatting for error pages. */
.errorCode {
  font-size: 5em;
  font-family: Impact, Charcoal, sans-serif;
  margin-bottom: 0.1em;
  color: red;
  .outlineText(black, 2px);
  text-align: center;
}

.errorDescription {
  font-size: 2em;
  margin-top: 0;
  text-align: center;
}

/* Create collapse/uncollapse indicators on the issue accordions to show that
   they can be collapsed/uncollapsed. The style with the .collapsed class will
   override the one without for elements that are collapsed. */
.panel-title-text::before {
  margin-right: 0.25em;
  color: #555;
  font-size: 0.9em;
  vertical-align: 20%;
  font-family: Monaco, monospace;
}

.panel-heading .panel-title-text::before {
  content: "[-]";
}

.panel-heading.collapsed .panel-title-text::before {
  content: "[+]";
}

/* Error message div displayed at the top of the page. It's actually at the top
   of the viewport, so the user won't miss it if they've scrolled down a bit. */
.topViewError {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  border-radius: 0;
  font-size: 1.25em;
  cursor: pointer;
}

/*******************************************************************************
 ****************************** MEDIA QUERIES **********************************
 ******************************************************************************/

@media (max-width: 700px) {
  /* Need to be conservative with spacing for mobile. */
  #reset-button {
    padding: 0px 5px;
  }

  .typeahead-container input[type="search"] {
    padding: 10px 5px;
  }
}

@media (min-width: 700px) {
  .smallHeading, .largeHeading {
    font-size: 4em;
  }

  /* Center everything in a block extending to the bottom */
  .smallPadding {
    max-width: 700px;
    background-color: white;
    padding: 1em;
    margin: 0 auto;
  }

  body {
    background-color: silver;
  }
}

/*******************************************************************************
 *********************************** MIXINS ************************************
 ******************************************************************************/

/* Simulates outlining text by creating solid shadows in every direction. The
   results will be undefined if the width is greater than the text size. This
   will not work for partially transparent colors. */
.outlineText(@color: black; @width: 2) {
  text-shadow: -@width 0 @color, 0 @width @color, @width 0 @color, 0 -@width @color,
      -@width -@width @color, @width @width @color, -@width @width @color, @width -@width @color;
}